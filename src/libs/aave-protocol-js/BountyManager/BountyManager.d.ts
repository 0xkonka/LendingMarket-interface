/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../common';

export interface BountyManagerInterface extends utils.Interface {
  functions: {
    'HUNTER_SHARE()': FunctionFragment;
    'addAddressToWL(address,bool)': FunctionFragment;
    'baseBountyUsdTarget()': FunctionFragment;
    'bountyBooster()': FunctionFragment;
    'bountyCount()': FunctionFragment;
    'changeWL(bool)': FunctionFragment;
    'claim(address,uint256)': FunctionFragment;
    'eligibilityDataProvider()': FunctionFragment;
    'executeBounty(address,bool,uint256)': FunctionFragment;
    'getBaseBounty()': FunctionFragment;
    'initialize(address,address,address,address,address,address,address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'maxBaseBounty()': FunctionFragment;
    'minDLPBalance()': FunctionFragment;
    'minStakeAmount()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'priceProvider()': FunctionFragment;
    'quote(address)': FunctionFragment;
    'rdnt()': FunctionFragment;
    'recoverERC20(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBaseBountyUsdTarget(uint256)': FunctionFragment;
    'setBounties()': FunctionFragment;
    'setBountyBooster(uint256)': FunctionFragment;
    'setHunterShare(uint256)': FunctionFragment;
    'setMaxBaseBounty(uint256)': FunctionFragment;
    'setMinStakeAmount(uint256)': FunctionFragment;
    'setSlippageLimit(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'weth()': FunctionFragment;
    'whitelist(address)': FunctionFragment;
    'whitelistActive()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'HUNTER_SHARE'
      | 'addAddressToWL'
      | 'baseBountyUsdTarget'
      | 'bountyBooster'
      | 'bountyCount'
      | 'changeWL'
      | 'claim'
      | 'eligibilityDataProvider'
      | 'executeBounty'
      | 'getBaseBounty'
      | 'initialize'
      | 'maxBaseBounty'
      | 'minDLPBalance'
      | 'minStakeAmount'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'priceProvider'
      | 'quote'
      | 'rdnt'
      | 'recoverERC20'
      | 'renounceOwnership'
      | 'setBaseBountyUsdTarget'
      | 'setBounties'
      | 'setBountyBooster'
      | 'setHunterShare'
      | 'setMaxBaseBounty'
      | 'setMinStakeAmount'
      | 'setSlippageLimit'
      | 'transferOwnership'
      | 'unpause'
      | 'weth'
      | 'whitelist'
      | 'whitelistActive'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'HUNTER_SHARE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addAddressToWL',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: 'baseBountyUsdTarget', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bountyBooster', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bountyCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeWL', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'claim',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'eligibilityDataProvider', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'executeBounty',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getBaseBounty', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'maxBaseBounty', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minDLPBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minStakeAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceProvider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'quote', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rdnt', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'recoverERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setBaseBountyUsdTarget',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setBounties', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setBountyBooster',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setHunterShare',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxBaseBounty',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMinStakeAmount',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setSlippageLimit',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'weth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'whitelistActive', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'HUNTER_SHARE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAddressToWL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseBountyUsdTarget', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bountyBooster', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bountyCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeWL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'eligibilityDataProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeBounty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBaseBounty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxBaseBounty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minDLPBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minStakeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rdnt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseBountyUsdTarget', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBounties', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBountyBooster', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHunterShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxBaseBounty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinStakeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSlippageLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistActive', data: BytesLike): Result;

  events: {
    'BaseBountyUsdTargetUpdated(uint256)': EventFragment;
    'BountyBoosterUpdated(uint256)': EventFragment;
    'BountyReserveEmpty(uint256)': EventFragment;
    'ChefIncentivesControllerUpdated(address)': EventFragment;
    'Disqualified(address)': EventFragment;
    'HunterShareUpdated(uint256)': EventFragment;
    'MaxBaseBountyUpdated(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'SlippageLimitUpdated(uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BaseBountyUsdTargetUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BountyBoosterUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BountyReserveEmpty'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChefIncentivesControllerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Disqualified'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HunterShareUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxBaseBountyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SlippageLimitUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface BaseBountyUsdTargetUpdatedEventObject {
  _newVal: BigNumber;
}
export type BaseBountyUsdTargetUpdatedEvent = TypedEvent<
  [BigNumber],
  BaseBountyUsdTargetUpdatedEventObject
>;

export type BaseBountyUsdTargetUpdatedEventFilter =
  TypedEventFilter<BaseBountyUsdTargetUpdatedEvent>;

export interface BountyBoosterUpdatedEventObject {
  _newVal: BigNumber;
}
export type BountyBoosterUpdatedEvent = TypedEvent<[BigNumber], BountyBoosterUpdatedEventObject>;

export type BountyBoosterUpdatedEventFilter = TypedEventFilter<BountyBoosterUpdatedEvent>;

export interface BountyReserveEmptyEventObject {
  _bal: BigNumber;
}
export type BountyReserveEmptyEvent = TypedEvent<[BigNumber], BountyReserveEmptyEventObject>;

export type BountyReserveEmptyEventFilter = TypedEventFilter<BountyReserveEmptyEvent>;

export interface ChefIncentivesControllerUpdatedEventObject {
  _chef: string;
}
export type ChefIncentivesControllerUpdatedEvent = TypedEvent<
  [string],
  ChefIncentivesControllerUpdatedEventObject
>;

export type ChefIncentivesControllerUpdatedEventFilter =
  TypedEventFilter<ChefIncentivesControllerUpdatedEvent>;

export interface DisqualifiedEventObject {
  user: string;
}
export type DisqualifiedEvent = TypedEvent<[string], DisqualifiedEventObject>;

export type DisqualifiedEventFilter = TypedEventFilter<DisqualifiedEvent>;

export interface HunterShareUpdatedEventObject {
  _newVal: BigNumber;
}
export type HunterShareUpdatedEvent = TypedEvent<[BigNumber], HunterShareUpdatedEventObject>;

export type HunterShareUpdatedEventFilter = TypedEventFilter<HunterShareUpdatedEvent>;

export interface MaxBaseBountyUpdatedEventObject {
  _newVal: BigNumber;
}
export type MaxBaseBountyUpdatedEvent = TypedEvent<[BigNumber], MaxBaseBountyUpdatedEventObject>;

export type MaxBaseBountyUpdatedEventFilter = TypedEventFilter<MaxBaseBountyUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SlippageLimitUpdatedEventObject {
  _newVal: BigNumber;
}
export type SlippageLimitUpdatedEvent = TypedEvent<[BigNumber], SlippageLimitUpdatedEventObject>;

export type SlippageLimitUpdatedEventFilter = TypedEventFilter<SlippageLimitUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface BountyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BountyManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HUNTER_SHARE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAddressToWL(
      user: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    baseBountyUsdTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    bountyBooster(overrides?: CallOverrides): Promise<[BigNumber]>;

    bountyCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeWL(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _user: PromiseOrValue<string>,
      _actionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eligibilityDataProvider(overrides?: CallOverrides): Promise<[string]>;

    executeBounty(
      _user: PromiseOrValue<string>,
      _execute: PromiseOrValue<boolean>,
      _actionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBaseBounty(overrides?: CallOverrides): Promise<[BigNumber] & { bounty: BigNumber }>;

    initialize(
      _rdnt: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _mfd: PromiseOrValue<string>,
      _chef: PromiseOrValue<string>,
      _priceProvider: PromiseOrValue<string>,
      _eligibilityDataProvider: PromiseOrValue<string>,
      _compounder: PromiseOrValue<string>,
      _hunterShare: PromiseOrValue<BigNumberish>,
      _baseBountyUsdTarget: PromiseOrValue<BigNumberish>,
      _maxBaseBounty: PromiseOrValue<BigNumberish>,
      _bountyBooster: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxBaseBounty(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDLPBalance(overrides?: CallOverrides): Promise<[BigNumber] & { minDLPBalance: BigNumber }>;

    minStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    priceProvider(overrides?: CallOverrides): Promise<[string]>;

    quote(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bounty: BigNumber; actionType: BigNumber }>;

    rdnt(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseBountyUsdTarget(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBounties(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBountyBooster(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHunterShare(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxBaseBounty(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinStakeAmount(
      _minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSlippageLimit(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    whitelistActive(overrides?: CallOverrides): Promise<[boolean]>;
  };

  HUNTER_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

  addAddressToWL(
    user: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  baseBountyUsdTarget(overrides?: CallOverrides): Promise<BigNumber>;

  bountyBooster(overrides?: CallOverrides): Promise<BigNumber>;

  bountyCount(overrides?: CallOverrides): Promise<BigNumber>;

  changeWL(
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _user: PromiseOrValue<string>,
    _actionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eligibilityDataProvider(overrides?: CallOverrides): Promise<string>;

  executeBounty(
    _user: PromiseOrValue<string>,
    _execute: PromiseOrValue<boolean>,
    _actionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBaseBounty(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _rdnt: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    _mfd: PromiseOrValue<string>,
    _chef: PromiseOrValue<string>,
    _priceProvider: PromiseOrValue<string>,
    _eligibilityDataProvider: PromiseOrValue<string>,
    _compounder: PromiseOrValue<string>,
    _hunterShare: PromiseOrValue<BigNumberish>,
    _baseBountyUsdTarget: PromiseOrValue<BigNumberish>,
    _maxBaseBounty: PromiseOrValue<BigNumberish>,
    _bountyBooster: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxBaseBounty(overrides?: CallOverrides): Promise<BigNumber>;

  minDLPBalance(overrides?: CallOverrides): Promise<BigNumber>;

  minStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  priceProvider(overrides?: CallOverrides): Promise<string>;

  quote(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { bounty: BigNumber; actionType: BigNumber }>;

  rdnt(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseBountyUsdTarget(
    _newVal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBounties(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBountyBooster(
    _newVal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHunterShare(
    _newVal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxBaseBounty(
    _newVal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinStakeAmount(
    _minStakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSlippageLimit(
    _newVal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  whitelistActive(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    HUNTER_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

    addAddressToWL(
      user: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    baseBountyUsdTarget(overrides?: CallOverrides): Promise<BigNumber>;

    bountyBooster(overrides?: CallOverrides): Promise<BigNumber>;

    bountyCount(overrides?: CallOverrides): Promise<BigNumber>;

    changeWL(status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    claim(
      _user: PromiseOrValue<string>,
      _actionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bounty: BigNumber; actionType: BigNumber }>;

    eligibilityDataProvider(overrides?: CallOverrides): Promise<string>;

    executeBounty(
      _user: PromiseOrValue<string>,
      _execute: PromiseOrValue<boolean>,
      _actionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bounty: BigNumber; actionType: BigNumber }>;

    getBaseBounty(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _rdnt: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _mfd: PromiseOrValue<string>,
      _chef: PromiseOrValue<string>,
      _priceProvider: PromiseOrValue<string>,
      _eligibilityDataProvider: PromiseOrValue<string>,
      _compounder: PromiseOrValue<string>,
      _hunterShare: PromiseOrValue<BigNumberish>,
      _baseBountyUsdTarget: PromiseOrValue<BigNumberish>,
      _maxBaseBounty: PromiseOrValue<BigNumberish>,
      _bountyBooster: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxBaseBounty(overrides?: CallOverrides): Promise<BigNumber>;

    minDLPBalance(overrides?: CallOverrides): Promise<BigNumber>;

    minStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    priceProvider(overrides?: CallOverrides): Promise<string>;

    quote(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { bounty: BigNumber; actionType: BigNumber }>;

    rdnt(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBaseBountyUsdTarget(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBounties(overrides?: CallOverrides): Promise<void>;

    setBountyBooster(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHunterShare(_newVal: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxBaseBounty(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinStakeAmount(
      _minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlippageLimit(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    whitelistActive(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'BaseBountyUsdTargetUpdated(uint256)'(_newVal?: null): BaseBountyUsdTargetUpdatedEventFilter;
    BaseBountyUsdTargetUpdated(_newVal?: null): BaseBountyUsdTargetUpdatedEventFilter;

    'BountyBoosterUpdated(uint256)'(_newVal?: null): BountyBoosterUpdatedEventFilter;
    BountyBoosterUpdated(_newVal?: null): BountyBoosterUpdatedEventFilter;

    'BountyReserveEmpty(uint256)'(_bal?: null): BountyReserveEmptyEventFilter;
    BountyReserveEmpty(_bal?: null): BountyReserveEmptyEventFilter;

    'ChefIncentivesControllerUpdated(address)'(
      _chef?: null
    ): ChefIncentivesControllerUpdatedEventFilter;
    ChefIncentivesControllerUpdated(_chef?: null): ChefIncentivesControllerUpdatedEventFilter;

    'Disqualified(address)'(user?: null): DisqualifiedEventFilter;
    Disqualified(user?: null): DisqualifiedEventFilter;

    'HunterShareUpdated(uint256)'(_newVal?: null): HunterShareUpdatedEventFilter;
    HunterShareUpdated(_newVal?: null): HunterShareUpdatedEventFilter;

    'MaxBaseBountyUpdated(uint256)'(_newVal?: null): MaxBaseBountyUpdatedEventFilter;
    MaxBaseBountyUpdated(_newVal?: null): MaxBaseBountyUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'SlippageLimitUpdated(uint256)'(_newVal?: null): SlippageLimitUpdatedEventFilter;
    SlippageLimitUpdated(_newVal?: null): SlippageLimitUpdatedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    HUNTER_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

    addAddressToWL(
      user: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    baseBountyUsdTarget(overrides?: CallOverrides): Promise<BigNumber>;

    bountyBooster(overrides?: CallOverrides): Promise<BigNumber>;

    bountyCount(overrides?: CallOverrides): Promise<BigNumber>;

    changeWL(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _user: PromiseOrValue<string>,
      _actionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eligibilityDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    executeBounty(
      _user: PromiseOrValue<string>,
      _execute: PromiseOrValue<boolean>,
      _actionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBaseBounty(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _rdnt: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _mfd: PromiseOrValue<string>,
      _chef: PromiseOrValue<string>,
      _priceProvider: PromiseOrValue<string>,
      _eligibilityDataProvider: PromiseOrValue<string>,
      _compounder: PromiseOrValue<string>,
      _hunterShare: PromiseOrValue<BigNumberish>,
      _baseBountyUsdTarget: PromiseOrValue<BigNumberish>,
      _maxBaseBounty: PromiseOrValue<BigNumberish>,
      _bountyBooster: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxBaseBounty(overrides?: CallOverrides): Promise<BigNumber>;

    minDLPBalance(overrides?: CallOverrides): Promise<BigNumber>;

    minStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    priceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    quote(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rdnt(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseBountyUsdTarget(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBounties(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setBountyBooster(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHunterShare(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxBaseBounty(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinStakeAmount(
      _minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSlippageLimit(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistActive(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    HUNTER_SHARE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAddressToWL(
      user: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    baseBountyUsdTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bountyBooster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bountyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeWL(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _user: PromiseOrValue<string>,
      _actionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eligibilityDataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeBounty(
      _user: PromiseOrValue<string>,
      _execute: PromiseOrValue<boolean>,
      _actionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBaseBounty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _rdnt: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _mfd: PromiseOrValue<string>,
      _chef: PromiseOrValue<string>,
      _priceProvider: PromiseOrValue<string>,
      _eligibilityDataProvider: PromiseOrValue<string>,
      _compounder: PromiseOrValue<string>,
      _hunterShare: PromiseOrValue<BigNumberish>,
      _baseBountyUsdTarget: PromiseOrValue<BigNumberish>,
      _maxBaseBounty: PromiseOrValue<BigNumberish>,
      _bountyBooster: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxBaseBounty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDLPBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rdnt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseBountyUsdTarget(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBounties(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBountyBooster(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHunterShare(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBaseBounty(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinStakeAmount(
      _minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSlippageLimit(
      _newVal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
