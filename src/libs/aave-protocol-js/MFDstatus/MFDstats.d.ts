/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace MFDstats {
  export type AddTransferParamStruct = {
    asset: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    treasury: PromiseOrValue<string>;
  };

  export type AddTransferParamStructOutput = [string, BigNumber, string] & {
    asset: string;
    amount: BigNumber;
    treasury: string;
  };

  export type TrackPerAssetStruct = {
    assetAddress: PromiseOrValue<string>;
    assetSymbol: PromiseOrValue<string>;
    usdValue: PromiseOrValue<BigNumberish>;
    lpUsdValue: PromiseOrValue<BigNumberish>;
  };

  export type TrackPerAssetStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    assetAddress: string;
    assetSymbol: string;
    usdValue: BigNumber;
    lpUsdValue: BigNumber;
  };
}

export interface MFDstatsInterface extends utils.Interface {
  functions: {
    "DAY_SECONDS()": FunctionFragment;
    "DECIMALS()": FunctionFragment;
    "RATIO_DIVISOR()": FunctionFragment;
    "addTransfer((address,uint256,address))": FunctionFragment;
    "addVest(address)": FunctionFragment;
    "getCirculatingSupply(address,address,address)": FunctionFragment;
    "getLastDayTotal()": FunctionFragment;
    "getPriceDecimal(address)": FunctionFragment;
    "getTotal()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "middleFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMiddleFee(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vests(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DAY_SECONDS"
      | "DECIMALS"
      | "RATIO_DIVISOR"
      | "addTransfer"
      | "addVest"
      | "getCirculatingSupply"
      | "getLastDayTotal"
      | "getPriceDecimal"
      | "getTotal"
      | "initialize"
      | "middleFee"
      | "owner"
      | "renounceOwnership"
      | "setMiddleFee"
      | "transferOwnership"
      | "vests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DAY_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RATIO_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTransfer",
    values: [MFDstats.AddTransferParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addVest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCirculatingSupply",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDayTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceDecimal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getTotal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "middleFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMiddleFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DAY_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RATIO_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastDayTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceDecimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTotal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "middleFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMiddleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vests", data: BytesLike): Result;

  events: {
    "NewTransferAdded(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewTransferAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface NewTransferAddedEventObject {
  asset: string;
  usdValue: BigNumber;
  lpUsdValue: BigNumber;
}
export type NewTransferAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewTransferAddedEventObject
>;

export type NewTransferAddedEventFilter =
  TypedEventFilter<NewTransferAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MFDstats extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MFDstatsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAY_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    RATIO_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTransfer(
      param: MFDstats.AddTransferParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addVest(
      _vest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCirculatingSupply(
      _chef: PromiseOrValue<string>,
      _bountyManager: PromiseOrValue<string>,
      _migration: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastDayTotal(
      overrides?: CallOverrides
    ): Promise<[MFDstats.TrackPerAssetStructOutput[]]>;

    getPriceDecimal(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTotal(
      overrides?: CallOverrides
    ): Promise<[MFDstats.TrackPerAssetStructOutput[]]>;

    initialize(
      aaveOracle: PromiseOrValue<string>,
      emissionsReserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    middleFee(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMiddleFee(
      _middleFee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  DAY_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  DECIMALS(overrides?: CallOverrides): Promise<number>;

  RATIO_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  addTransfer(
    param: MFDstats.AddTransferParamStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addVest(
    _vest: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCirculatingSupply(
    _chef: PromiseOrValue<string>,
    _bountyManager: PromiseOrValue<string>,
    _migration: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastDayTotal(
    overrides?: CallOverrides
  ): Promise<MFDstats.TrackPerAssetStructOutput[]>;

  getPriceDecimal(
    assetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTotal(
    overrides?: CallOverrides
  ): Promise<MFDstats.TrackPerAssetStructOutput[]>;

  initialize(
    aaveOracle: PromiseOrValue<string>,
    emissionsReserve: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  middleFee(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMiddleFee(
    _middleFee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    DAY_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMALS(overrides?: CallOverrides): Promise<number>;

    RATIO_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    addTransfer(
      param: MFDstats.AddTransferParamStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addVest(
      _vest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCirculatingSupply(
      _chef: PromiseOrValue<string>,
      _bountyManager: PromiseOrValue<string>,
      _migration: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastDayTotal(
      overrides?: CallOverrides
    ): Promise<MFDstats.TrackPerAssetStructOutput[]>;

    getPriceDecimal(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTotal(
      overrides?: CallOverrides
    ): Promise<MFDstats.TrackPerAssetStructOutput[]>;

    initialize(
      aaveOracle: PromiseOrValue<string>,
      emissionsReserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    middleFee(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMiddleFee(
      _middleFee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "NewTransferAdded(address,uint256,uint256)"(
      asset?: null,
      usdValue?: null,
      lpUsdValue?: null
    ): NewTransferAddedEventFilter;
    NewTransferAdded(
      asset?: null,
      usdValue?: null,
      lpUsdValue?: null
    ): NewTransferAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DAY_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    RATIO_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    addTransfer(
      param: MFDstats.AddTransferParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addVest(
      _vest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCirculatingSupply(
      _chef: PromiseOrValue<string>,
      _bountyManager: PromiseOrValue<string>,
      _migration: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastDayTotal(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceDecimal(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotal(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      aaveOracle: PromiseOrValue<string>,
      emissionsReserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    middleFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMiddleFee(
      _middleFee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAY_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATIO_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTransfer(
      param: MFDstats.AddTransferParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addVest(
      _vest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCirculatingSupply(
      _chef: PromiseOrValue<string>,
      _bountyManager: PromiseOrValue<string>,
      _migration: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastDayTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceDecimal(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      aaveOracle: PromiseOrValue<string>,
      emissionsReserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    middleFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMiddleFee(
      _middleFee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
