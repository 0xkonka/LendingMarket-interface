/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export type EarnedBalanceStruct = {
  amount: PromiseOrValue<BigNumberish>;
  unlockTime: PromiseOrValue<BigNumberish>;
  penalty: PromiseOrValue<BigNumberish>;
};

export type EarnedBalanceStructOutput = [BigNumber, BigNumber, BigNumber] & {
  amount: BigNumber;
  unlockTime: BigNumber;
  penalty: BigNumber;
};

export type LockedBalanceStruct = {
  amount: PromiseOrValue<BigNumberish>;
  unlockTime: PromiseOrValue<BigNumberish>;
  multiplier: PromiseOrValue<BigNumberish>;
  duration: PromiseOrValue<BigNumberish>;
};

export type LockedBalanceStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  amount: BigNumber;
  unlockTime: BigNumber;
  multiplier: BigNumber;
  duration: BigNumber;
};

export declare namespace IFeeDistribution {
  export type RewardDataStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type RewardDataStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface MultiFeeDistributionInterface extends utils.Interface {
  functions: {
    'DEFAULT_LOCK_INDEX()': FunctionFragment;
    'HALF()': FunctionFragment;
    'QUART()': FunctionFragment;
    'WHOLE()': FunctionFragment;
    'addReward(address)': FunctionFragment;
    'addRewardConverter(address)': FunctionFragment;
    'autoRelockDisabled(address)': FunctionFragment;
    'autocompoundEnabled(address)': FunctionFragment;
    'bountyManager()': FunctionFragment;
    'burn()': FunctionFragment;
    'claimBounty(address,bool)': FunctionFragment;
    'claimFromConverter(address)': FunctionFragment;
    'claimableRewards(address)': FunctionFragment;
    'daoTreasury()': FunctionFragment;
    'defaultLockDuration()': FunctionFragment;
    'defaultLockIndex(address)': FunctionFragment;
    'earnedBalances(address)': FunctionFragment;
    'exit(bool)': FunctionFragment;
    'getAllRewards()': FunctionFragment;
    'getLockDurations()': FunctionFragment;
    'getLockMultipliers()': FunctionFragment;
    'getPriceProvider()': FunctionFragment;
    'getReward(address[])': FunctionFragment;
    'getRewardForDuration(address)': FunctionFragment;
    'incentivesController()': FunctionFragment;
    'individualEarlyExit(bool,uint256)': FunctionFragment;
    'initialize(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'lastAutocompound(address)': FunctionFragment;
    'lastClaimTime(address)': FunctionFragment;
    'lastTimeRewardApplicable(address)': FunctionFragment;
    'lockInfo(address)': FunctionFragment;
    'lockedBalances(address)': FunctionFragment;
    'lockedSupply()': FunctionFragment;
    'lockedSupplyWithMultiplier()': FunctionFragment;
    'middleFeeDistribution()': FunctionFragment;
    'mint(address,uint256,bool)': FunctionFragment;
    'minters(address)': FunctionFragment;
    'mintersAreSet()': FunctionFragment;
    'onUpgrade()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'rdntToken()': FunctionFragment;
    'recoverERC20(address,uint256)': FunctionFragment;
    'relock()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'requalify()': FunctionFragment;
    'rewardConverter()': FunctionFragment;
    'rewardData(address)': FunctionFragment;
    'rewardPerToken(address)': FunctionFragment;
    'rewardTokens(uint256)': FunctionFragment;
    'rewards(address,address)': FunctionFragment;
    'rewardsDuration()': FunctionFragment;
    'rewardsLookback()': FunctionFragment;
    'setAddresses(address,address,address)': FunctionFragment;
    'setAutocompound(bool)': FunctionFragment;
    'setBountyManager(address)': FunctionFragment;
    'setDefaultRelockTypeIndex(uint256)': FunctionFragment;
    'setLPToken(address)': FunctionFragment;
    'setLockTypeInfo(uint256[],uint256[])': FunctionFragment;
    'setLookback(uint256)': FunctionFragment;
    'setMinters(address[])': FunctionFragment;
    'setRelock(bool)': FunctionFragment;
    'stake(uint256,address,uint256)': FunctionFragment;
    'stakingToken()': FunctionFragment;
    'startfleetTreasury()': FunctionFragment;
    'totalBalance(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'userRewardPerTokenPaid(address,address)': FunctionFragment;
    'userlist()': FunctionFragment;
    'vestDuration()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawExpiredLocksFor(address)': FunctionFragment;
    'withdrawExpiredLocksForWithOptions(address,uint256,bool)': FunctionFragment;
    'withdrawableBalance(address)': FunctionFragment;
    'zapVestingToLp(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_LOCK_INDEX'
      | 'HALF'
      | 'QUART'
      | 'WHOLE'
      | 'addReward'
      | 'addRewardConverter'
      | 'autoRelockDisabled'
      | 'autocompoundEnabled'
      | 'bountyManager'
      | 'burn'
      | 'claimBounty'
      | 'claimFromConverter'
      | 'claimableRewards'
      | 'daoTreasury'
      | 'defaultLockDuration'
      | 'defaultLockIndex'
      | 'earnedBalances'
      | 'exit'
      | 'getAllRewards'
      | 'getLockDurations'
      | 'getLockMultipliers'
      | 'getPriceProvider'
      | 'getReward'
      | 'getRewardForDuration'
      | 'incentivesController'
      | 'individualEarlyExit'
      | 'initialize'
      | 'lastAutocompound'
      | 'lastClaimTime'
      | 'lastTimeRewardApplicable'
      | 'lockInfo'
      | 'lockedBalances'
      | 'lockedSupply'
      | 'lockedSupplyWithMultiplier'
      | 'middleFeeDistribution'
      | 'mint'
      | 'minters'
      | 'mintersAreSet'
      | 'onUpgrade'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'rdntToken'
      | 'recoverERC20'
      | 'relock'
      | 'renounceOwnership'
      | 'requalify'
      | 'rewardConverter'
      | 'rewardData'
      | 'rewardPerToken'
      | 'rewardTokens'
      | 'rewards'
      | 'rewardsDuration'
      | 'rewardsLookback'
      | 'setAddresses'
      | 'setAutocompound'
      | 'setBountyManager'
      | 'setDefaultRelockTypeIndex'
      | 'setLPToken'
      | 'setLockTypeInfo'
      | 'setLookback'
      | 'setMinters'
      | 'setRelock'
      | 'stake'
      | 'stakingToken'
      | 'startfleetTreasury'
      | 'totalBalance'
      | 'transferOwnership'
      | 'unpause'
      | 'userRewardPerTokenPaid'
      | 'userlist'
      | 'vestDuration'
      | 'withdraw'
      | 'withdrawExpiredLocksFor'
      | 'withdrawExpiredLocksForWithOptions'
      | 'withdrawableBalance'
      | 'zapVestingToLp'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_LOCK_INDEX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'HALF', values?: undefined): string;
  encodeFunctionData(functionFragment: 'QUART', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WHOLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'addRewardConverter',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'autoRelockDisabled',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'autocompoundEnabled',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'bountyManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'burn', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claimBounty',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimFromConverter',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimableRewards',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'daoTreasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'defaultLockDuration', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'defaultLockIndex',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'earnedBalances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'exit', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'getAllRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLockDurations', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLockMultipliers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPriceProvider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReward', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(
    functionFragment: 'getRewardForDuration',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'incentivesController', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'individualEarlyExit',
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'lastAutocompound',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'lastClaimTime', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'lastTimeRewardApplicable',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'lockInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lockedBalances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lockedSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedSupplyWithMultiplier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'middleFeeDistribution', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: 'minters', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'mintersAreSet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'onUpgrade', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rdntToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'recoverERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'relock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requalify', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardConverter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardData', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardPerToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'rewardTokens',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'rewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'rewardsDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsLookback', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setAddresses',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setAutocompound',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBountyManager',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setDefaultRelockTypeIndex',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setLPToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setLockTypeInfo',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setLookback',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setMinters', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'setRelock', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'stake',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'stakingToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startfleetTreasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'userRewardPerTokenPaid',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'userlist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vestDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawExpiredLocksFor',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawExpiredLocksForWithOptions',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawableBalance',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'zapVestingToLp', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_LOCK_INDEX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'HALF', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'QUART', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WHOLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRewardConverter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'autoRelockDisabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'autocompoundEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bountyManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimBounty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimFromConverter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daoTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultLockDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultLockIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earnedBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLockDurations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLockMultipliers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPriceProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardForDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'individualEarlyExit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastAutocompound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastClaimTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTimeRewardApplicable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedSupplyWithMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'middleFeeDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintersAreSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onUpgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rdntToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requalify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardConverter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsLookback', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAutocompound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBountyManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDefaultRelockTypeIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLPToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLockTypeInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLookback', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRelock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startfleetTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRewardPerTokenPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userlist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawExpiredLocksFor', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawExpiredLocksForWithOptions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdrawableBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'zapVestingToLp', data: BytesLike): Result;

  events: {
    'IneligibleRewardRemoved(address,address,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'Locked(address,uint256,uint256,bool)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'Recovered(address,uint256)': EventFragment;
    'Relocked(address,uint256,uint256)': EventFragment;
    'RewardPaid(address,address,uint256)': EventFragment;
    'RewardsDurationUpdated(address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdrawn(address,uint256,uint256,uint256,uint256,bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'IneligibleRewardRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Locked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Recovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Relocked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface IneligibleRewardRemovedEventObject {
  user: string;
  rewardToken: string;
  reward: BigNumber;
}
export type IneligibleRewardRemovedEvent = TypedEvent<
  [string, string, BigNumber],
  IneligibleRewardRemovedEventObject
>;

export type IneligibleRewardRemovedEventFilter = TypedEventFilter<IneligibleRewardRemovedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LockedEventObject {
  user: string;
  amount: BigNumber;
  lockedBalance: BigNumber;
  isLP: boolean;
}
export type LockedEvent = TypedEvent<[string, BigNumber, BigNumber, boolean], LockedEventObject>;

export type LockedEventFilter = TypedEventFilter<LockedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RecoveredEventObject {
  token: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<[string, BigNumber], RecoveredEventObject>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface RelockedEventObject {
  user: string;
  amount: BigNumber;
  lockIndex: BigNumber;
}
export type RelockedEvent = TypedEvent<[string, BigNumber, BigNumber], RelockedEventObject>;

export type RelockedEventFilter = TypedEventFilter<RelockedEvent>;

export interface RewardPaidEventObject {
  user: string;
  rewardToken: string;
  reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<[string, string, BigNumber], RewardPaidEventObject>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface RewardsDurationUpdatedEventObject {
  token: string;
  newDuration: BigNumber;
}
export type RewardsDurationUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RewardsDurationUpdatedEventObject
>;

export type RewardsDurationUpdatedEventFilter = TypedEventFilter<RewardsDurationUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawnEventObject {
  user: string;
  receivedAmount: BigNumber;
  lockedBalance: BigNumber;
  penalty: BigNumber;
  burn: BigNumber;
  isLP: boolean;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface MultiFeeDistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiFeeDistributionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_LOCK_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    HALF(overrides?: CallOverrides): Promise<[BigNumber]>;

    QUART(overrides?: CallOverrides): Promise<[BigNumber]>;

    WHOLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addReward(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRewardConverter(
      _rewardConverter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    autoRelockDisabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    autocompoundEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bountyManager(overrides?: CallOverrides): Promise<[string]>;

    burn(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimBounty(
      _user: PromiseOrValue<string>,
      _execute: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFromConverter(
      onBehalf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IFeeDistribution.RewardDataStructOutput[]] & {
        rewardsData: IFeeDistribution.RewardDataStructOutput[];
      }
    >;

    daoTreasury(overrides?: CallOverrides): Promise<[string]>;

    defaultLockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultLockIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    earnedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, EarnedBalanceStructOutput[]] & {
        total: BigNumber;
        unlocked: BigNumber;
        earningsData: EarnedBalanceStructOutput[];
      }
    >;

    exit(
      claimRewards: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLockDurations(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getLockMultipliers(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getPriceProvider(overrides?: CallOverrides): Promise<[string]>;

    getReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRewardForDuration(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incentivesController(overrides?: CallOverrides): Promise<[string]>;

    individualEarlyExit(
      claimRewards: PromiseOrValue<boolean>,
      unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _rdntToken: PromiseOrValue<string>,
      _lockZap: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _userlist: PromiseOrValue<string>,
      priceProvider: PromiseOrValue<string>,
      _rewardsDuration: PromiseOrValue<BigNumberish>,
      _rewardsLookback: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      _burnRatio: PromiseOrValue<BigNumberish>,
      _vestDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastAutocompound(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastClaimTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTimeRewardApplicable(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LockedBalanceStructOutput[]]>;

    lockedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, LockedBalanceStructOutput[]] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockedWithMultiplier: BigNumber;
        lockData: LockedBalanceStructOutput[];
      }
    >;

    lockedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedSupplyWithMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    middleFeeDistribution(overrides?: CallOverrides): Promise<[string]>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withPenalty: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    mintersAreSet(overrides?: CallOverrides): Promise<[boolean]>;

    onUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rdntToken(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requalify(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardConverter(overrides?: CallOverrides): Promise<[string]>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardPerSecond: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
        balance: BigNumber;
      }
    >;

    rewardPerToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rptStored: BigNumber }>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsLookback(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAddresses(
      _controller: PromiseOrValue<string>,
      _middleFeeDistribution: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutocompound(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBountyManager(
      _bounty: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultRelockTypeIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLPToken(
      _stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLockTypeInfo(
      _lockPeriod: PromiseOrValue<BigNumberish>[],
      _rewardMultipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLookback(
      _lookback: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelock(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      typeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    startfleetTreasury(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userlist(overrides?: CallOverrides): Promise<[string]>;

    vestDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawExpiredLocksFor(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawExpiredLocksForWithOptions(
      _address: PromiseOrValue<string>,
      _limit: PromiseOrValue<BigNumberish>,
      _ignoreRelock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        penaltyAmount: BigNumber;
        burnAmount: BigNumber;
      }
    >;

    zapVestingToLp(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_LOCK_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  HALF(overrides?: CallOverrides): Promise<BigNumber>;

  QUART(overrides?: CallOverrides): Promise<BigNumber>;

  WHOLE(overrides?: CallOverrides): Promise<BigNumber>;

  addReward(
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRewardConverter(
    _rewardConverter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  autoRelockDisabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  autocompoundEnabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  bountyManager(overrides?: CallOverrides): Promise<string>;

  burn(overrides?: CallOverrides): Promise<BigNumber>;

  claimBounty(
    _user: PromiseOrValue<string>,
    _execute: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFromConverter(
    onBehalf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableRewards(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IFeeDistribution.RewardDataStructOutput[]>;

  daoTreasury(overrides?: CallOverrides): Promise<string>;

  defaultLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  defaultLockIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  earnedBalances(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, EarnedBalanceStructOutput[]] & {
      total: BigNumber;
      unlocked: BigNumber;
      earningsData: EarnedBalanceStructOutput[];
    }
  >;

  exit(
    claimRewards: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLockDurations(overrides?: CallOverrides): Promise<BigNumber[]>;

  getLockMultipliers(overrides?: CallOverrides): Promise<BigNumber[]>;

  getPriceProvider(overrides?: CallOverrides): Promise<string>;

  getReward(
    _rewardTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRewardForDuration(
    _rewardToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incentivesController(overrides?: CallOverrides): Promise<string>;

  individualEarlyExit(
    claimRewards: PromiseOrValue<boolean>,
    unlockTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _rdntToken: PromiseOrValue<string>,
    _lockZap: PromiseOrValue<string>,
    _dao: PromiseOrValue<string>,
    _userlist: PromiseOrValue<string>,
    priceProvider: PromiseOrValue<string>,
    _rewardsDuration: PromiseOrValue<BigNumberish>,
    _rewardsLookback: PromiseOrValue<BigNumberish>,
    _lockDuration: PromiseOrValue<BigNumberish>,
    _burnRatio: PromiseOrValue<BigNumberish>,
    _vestDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastAutocompound(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lastClaimTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lastTimeRewardApplicable(
    _rewardToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockInfo(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LockedBalanceStructOutput[]>;

  lockedBalances(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, LockedBalanceStructOutput[]] & {
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockedWithMultiplier: BigNumber;
      lockData: LockedBalanceStructOutput[];
    }
  >;

  lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  lockedSupplyWithMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  middleFeeDistribution(overrides?: CallOverrides): Promise<string>;

  mint(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    withPenalty: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  mintersAreSet(overrides?: CallOverrides): Promise<boolean>;

  onUpgrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rdntToken(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requalify(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardConverter(overrides?: CallOverrides): Promise<string>;

  rewardData(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      periodFinish: BigNumber;
      rewardPerSecond: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
      balance: BigNumber;
    }
  >;

  rewardPerToken(
    _rewardToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  rewards(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsLookback(overrides?: CallOverrides): Promise<BigNumber>;

  setAddresses(
    _controller: PromiseOrValue<string>,
    _middleFeeDistribution: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutocompound(
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBountyManager(
    _bounty: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultRelockTypeIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLPToken(
    _stakingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLockTypeInfo(
    _lockPeriod: PromiseOrValue<BigNumberish>[],
    _rewardMultipliers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLookback(
    _lookback: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinters(
    _minters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelock(
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    onBehalfOf: PromiseOrValue<string>,
    typeIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  startfleetTreasury(overrides?: CallOverrides): Promise<string>;

  totalBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  userRewardPerTokenPaid(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userlist(overrides?: CallOverrides): Promise<string>;

  vestDuration(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawExpiredLocksFor(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawExpiredLocksForWithOptions(
    _address: PromiseOrValue<string>,
    _limit: PromiseOrValue<BigNumberish>,
    _ignoreRelock: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawableBalance(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      penaltyAmount: BigNumber;
      burnAmount: BigNumber;
    }
  >;

  zapVestingToLp(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_LOCK_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    HALF(overrides?: CallOverrides): Promise<BigNumber>;

    QUART(overrides?: CallOverrides): Promise<BigNumber>;

    WHOLE(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(_rewardToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addRewardConverter(
      _rewardConverter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    autoRelockDisabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    autocompoundEnabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    bountyManager(overrides?: CallOverrides): Promise<string>;

    burn(overrides?: CallOverrides): Promise<BigNumber>;

    claimBounty(
      _user: PromiseOrValue<string>,
      _execute: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimFromConverter(onBehalf: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    claimableRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IFeeDistribution.RewardDataStructOutput[]>;

    daoTreasury(overrides?: CallOverrides): Promise<string>;

    defaultLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    defaultLockIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    earnedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, EarnedBalanceStructOutput[]] & {
        total: BigNumber;
        unlocked: BigNumber;
        earningsData: EarnedBalanceStructOutput[];
      }
    >;

    exit(claimRewards: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    getAllRewards(overrides?: CallOverrides): Promise<void>;

    getLockDurations(overrides?: CallOverrides): Promise<BigNumber[]>;

    getLockMultipliers(overrides?: CallOverrides): Promise<BigNumber[]>;

    getPriceProvider(overrides?: CallOverrides): Promise<string>;

    getReward(_rewardTokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    getRewardForDuration(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivesController(overrides?: CallOverrides): Promise<string>;

    individualEarlyExit(
      claimRewards: PromiseOrValue<boolean>,
      unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _rdntToken: PromiseOrValue<string>,
      _lockZap: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _userlist: PromiseOrValue<string>,
      priceProvider: PromiseOrValue<string>,
      _rewardsDuration: PromiseOrValue<BigNumberish>,
      _rewardsLookback: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      _burnRatio: PromiseOrValue<BigNumberish>,
      _vestDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastAutocompound(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LockedBalanceStructOutput[]>;

    lockedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, LockedBalanceStructOutput[]] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockedWithMultiplier: BigNumber;
        lockData: LockedBalanceStructOutput[];
      }
    >;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    lockedSupplyWithMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    middleFeeDistribution(overrides?: CallOverrides): Promise<string>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withPenalty: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    mintersAreSet(overrides?: CallOverrides): Promise<boolean>;

    onUpgrade(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rdntToken(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    relock(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requalify(overrides?: CallOverrides): Promise<void>;

    rewardConverter(overrides?: CallOverrides): Promise<string>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardPerSecond: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
        balance: BigNumber;
      }
    >;

    rewardPerToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsLookback(overrides?: CallOverrides): Promise<BigNumber>;

    setAddresses(
      _controller: PromiseOrValue<string>,
      _middleFeeDistribution: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAutocompound(_status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setBountyManager(_bounty: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setDefaultRelockTypeIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPToken(_stakingToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLockTypeInfo(
      _lockPeriod: PromiseOrValue<BigNumberish>[],
      _rewardMultipliers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLookback(_lookback: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMinters(_minters: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    setRelock(_status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      typeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    startfleetTreasury(overrides?: CallOverrides): Promise<string>;

    totalBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userlist(overrides?: CallOverrides): Promise<string>;

    vestDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawExpiredLocksFor(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawExpiredLocksForWithOptions(
      _address: PromiseOrValue<string>,
      _limit: PromiseOrValue<BigNumberish>,
      _ignoreRelock: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        penaltyAmount: BigNumber;
        burnAmount: BigNumber;
      }
    >;

    zapVestingToLp(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'IneligibleRewardRemoved(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      reward?: null
    ): IneligibleRewardRemovedEventFilter;
    IneligibleRewardRemoved(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      reward?: null
    ): IneligibleRewardRemovedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'Locked(address,uint256,uint256,bool)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      lockedBalance?: null,
      isLP?: null
    ): LockedEventFilter;
    Locked(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      lockedBalance?: null,
      isLP?: null
    ): LockedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Recovered(address,uint256)'(token?: null, amount?: null): RecoveredEventFilter;
    Recovered(token?: null, amount?: null): RecoveredEventFilter;

    'Relocked(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      lockIndex?: null
    ): RelockedEventFilter;
    Relocked(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      lockIndex?: null
    ): RelockedEventFilter;

    'RewardPaid(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      user?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;

    'RewardsDurationUpdated(address,uint256)'(
      token?: null,
      newDuration?: null
    ): RewardsDurationUpdatedEventFilter;
    RewardsDurationUpdated(token?: null, newDuration?: null): RewardsDurationUpdatedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdrawn(address,uint256,uint256,uint256,uint256,bool)'(
      user?: PromiseOrValue<string> | null,
      receivedAmount?: null,
      lockedBalance?: null,
      penalty?: null,
      burn?: null,
      isLP?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: PromiseOrValue<string> | null,
      receivedAmount?: null,
      lockedBalance?: null,
      penalty?: null,
      burn?: null,
      isLP?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    DEFAULT_LOCK_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    HALF(overrides?: CallOverrides): Promise<BigNumber>;

    QUART(overrides?: CallOverrides): Promise<BigNumber>;

    WHOLE(overrides?: CallOverrides): Promise<BigNumber>;

    addReward(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRewardConverter(
      _rewardConverter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    autoRelockDisabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    autocompoundEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bountyManager(overrides?: CallOverrides): Promise<BigNumber>;

    burn(overrides?: CallOverrides): Promise<BigNumber>;

    claimBounty(
      _user: PromiseOrValue<string>,
      _execute: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFromConverter(
      onBehalf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    defaultLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    defaultLockIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    earnedBalances(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      claimRewards: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getLockDurations(overrides?: CallOverrides): Promise<BigNumber>;

    getLockMultipliers(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRewardForDuration(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    individualEarlyExit(
      claimRewards: PromiseOrValue<boolean>,
      unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _rdntToken: PromiseOrValue<string>,
      _lockZap: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _userlist: PromiseOrValue<string>,
      priceProvider: PromiseOrValue<string>,
      _rewardsDuration: PromiseOrValue<BigNumberish>,
      _rewardsLookback: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      _burnRatio: PromiseOrValue<BigNumberish>,
      _vestDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastAutocompound(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockInfo(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalances(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    lockedSupplyWithMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    middleFeeDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withPenalty: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintersAreSet(overrides?: CallOverrides): Promise<BigNumber>;

    onUpgrade(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rdntToken(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relock(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requalify(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardConverter(overrides?: CallOverrides): Promise<BigNumber>;

    rewardData(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsLookback(overrides?: CallOverrides): Promise<BigNumber>;

    setAddresses(
      _controller: PromiseOrValue<string>,
      _middleFeeDistribution: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutocompound(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBountyManager(
      _bounty: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultRelockTypeIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLPToken(
      _stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLockTypeInfo(
      _lockPeriod: PromiseOrValue<BigNumberish>[],
      _rewardMultipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLookback(
      _lookback: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelock(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      typeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    startfleetTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userlist(overrides?: CallOverrides): Promise<BigNumber>;

    vestDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawExpiredLocksFor(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawExpiredLocksForWithOptions(
      _address: PromiseOrValue<string>,
      _limit: PromiseOrValue<BigNumberish>,
      _ignoreRelock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapVestingToLp(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_LOCK_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HALF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    QUART(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHOLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReward(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRewardConverter(
      _rewardConverter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    autoRelockDisabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autocompoundEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bountyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimBounty(
      _user: PromiseOrValue<string>,
      _execute: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFromConverter(
      onBehalf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daoTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultLockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultLockIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      claimRewards: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLockDurations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockMultipliers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentivesController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    individualEarlyExit(
      claimRewards: PromiseOrValue<boolean>,
      unlockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _rdntToken: PromiseOrValue<string>,
      _lockZap: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _userlist: PromiseOrValue<string>,
      priceProvider: PromiseOrValue<string>,
      _rewardsDuration: PromiseOrValue<BigNumberish>,
      _rewardsLookback: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      _burnRatio: PromiseOrValue<BigNumberish>,
      _vestDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastAutocompound(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastClaimTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedSupplyWithMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    middleFeeDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withPenalty: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintersAreSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rdntToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requalify(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardConverter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsLookback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddresses(
      _controller: PromiseOrValue<string>,
      _middleFeeDistribution: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutocompound(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBountyManager(
      _bounty: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultRelockTypeIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLPToken(
      _stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLockTypeInfo(
      _lockPeriod: PromiseOrValue<BigNumberish>[],
      _rewardMultipliers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLookback(
      _lookback: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelock(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      typeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startfleetTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userlist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawExpiredLocksFor(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawExpiredLocksForWithOptions(
      _address: PromiseOrValue<string>,
      _limit: PromiseOrValue<BigNumberish>,
      _ignoreRelock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zapVestingToLp(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
