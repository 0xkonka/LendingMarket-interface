/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace DataTypes {
  export type ReserveConfigurationMapStruct = {
    data: PromiseOrValue<BigNumberish>;
  };

  export type ReserveConfigurationMapStructOutput = [BigNumber] & {
    data: BigNumber;
  };
}

export interface LeveragerInterface extends utils.Interface {
  functions: {
    'API_ETH_MOCK_ADDRESS()': FunctionFragment;
    'BORROW_RATIO_DECIMALS()': FunctionFragment;
    'aaveOracle()': FunctionFragment;
    'feePercent()': FunctionFragment;
    'getConfiguration(address)': FunctionFragment;
    'getVDebtToken(address)': FunctionFragment;
    'lendingPool()': FunctionFragment;
    'lockZap()': FunctionFragment;
    'loop(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'loopETH(uint256,uint256,uint256)': FunctionFragment;
    'ltv(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardEligibleDataProvider()': FunctionFragment;
    'setFeePercent(uint256)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'weth()': FunctionFragment;
    'wethToZapEstimation(address,address,uint256,uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'API_ETH_MOCK_ADDRESS'
      | 'BORROW_RATIO_DECIMALS'
      | 'aaveOracle'
      | 'feePercent'
      | 'getConfiguration'
      | 'getVDebtToken'
      | 'lendingPool'
      | 'lockZap'
      | 'loop'
      | 'loopETH'
      | 'ltv'
      | 'owner'
      | 'renounceOwnership'
      | 'rewardEligibleDataProvider'
      | 'setFeePercent'
      | 'setTreasury'
      | 'transferOwnership'
      | 'treasury'
      | 'weth'
      | 'wethToZapEstimation'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'API_ETH_MOCK_ADDRESS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BORROW_RATIO_DECIMALS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'aaveOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feePercent', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getConfiguration',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'getVDebtToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lendingPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockZap', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'loop',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'loopETH',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'ltv', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardEligibleDataProvider', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setFeePercent',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'weth', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'wethToZapEstimation',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'API_ETH_MOCK_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BORROW_RATIO_DECIMALS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'aaveOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfiguration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVDebtToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lendingPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockZap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loopETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ltv', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardEligibleDataProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wethToZapEstimation', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface Leverager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeveragerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    API_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    aaveOracle(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getConfiguration(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ReserveConfigurationMapStructOutput]>;

    getVDebtToken(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    lendingPool(overrides?: CallOverrides): Promise<[string]>;

    lockZap(overrides?: CallOverrides): Promise<[string]>;

    loop(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loopETH(
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardEligibleDataProvider(overrides?: CallOverrides): Promise<[string]>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    wethToZapEstimation(
      user: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  API_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

  BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  aaveOracle(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  getConfiguration(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ReserveConfigurationMapStructOutput>;

  getVDebtToken(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  lendingPool(overrides?: CallOverrides): Promise<string>;

  lockZap(overrides?: CallOverrides): Promise<string>;

  loop(
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    interestRateMode: PromiseOrValue<BigNumberish>,
    borrowRatio: PromiseOrValue<BigNumberish>,
    loopCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loopETH(
    interestRateMode: PromiseOrValue<BigNumberish>,
    borrowRatio: PromiseOrValue<BigNumberish>,
    loopCount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardEligibleDataProvider(overrides?: CallOverrides): Promise<string>;

  setFeePercent(
    _feePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  wethToZapEstimation(
    user: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    borrowRatio: PromiseOrValue<BigNumberish>,
    loopCount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    API_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

    BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    aaveOracle(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getConfiguration(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ReserveConfigurationMapStructOutput>;

    getVDebtToken(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    lendingPool(overrides?: CallOverrides): Promise<string>;

    lockZap(overrides?: CallOverrides): Promise<string>;

    loop(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    loopETH(
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardEligibleDataProvider(overrides?: CallOverrides): Promise<string>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    wethToZapEstimation(
      user: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    API_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    aaveOracle(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getConfiguration(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVDebtToken(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    lockZap(overrides?: CallOverrides): Promise<BigNumber>;

    loop(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loopETH(
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardEligibleDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    wethToZapEstimation(
      user: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    API_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BORROW_RATIO_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aaveOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfiguration(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVDebtToken(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockZap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loop(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      isBorrow: PromiseOrValue<Boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loopETH(
      interestRateMode: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ltv(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardEligibleDataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethToZapEstimation(
      user: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      loopCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
