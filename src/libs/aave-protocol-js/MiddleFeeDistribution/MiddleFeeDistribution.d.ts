/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export type LockedBalanceStruct = {
  amount: PromiseOrValue<BigNumberish>;
  unlockTime: PromiseOrValue<BigNumberish>;
};

export type LockedBalanceStructOutput = [BigNumber, BigNumber] & {
  amount: BigNumber;
  unlockTime: BigNumber;
};

export interface MiddleFeeDistributionInterface extends utils.Interface {
  functions: {
    'addReward(address)': FunctionFragment;
    'admin()': FunctionFragment;
    'forwardReward(address[])': FunctionFragment;
    'getLPFeeDistributionAddress()': FunctionFragment;
    'getMFDstatsAddress()': FunctionFragment;
    'getMultiFeeDistributionAddress()': FunctionFragment;
    'getRdntTokenAddress()': FunctionFragment;
    'lockedBalances(address)': FunctionFragment;
    'lpFeeDistribution()': FunctionFragment;
    'lpLockingRewardRatio()': FunctionFragment;
    'mint(address,uint256,bool)': FunctionFragment;
    'minters(address)': FunctionFragment;
    'mintersAreSet()': FunctionFragment;
    'multiFeeDistribution()': FunctionFragment;
    'operationExpenseRatio()': FunctionFragment;
    'operationExpenses()': FunctionFragment;
    'owner()': FunctionFragment;
    'rdntToken()': FunctionFragment;
    'recoverERC20(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setLPFeeDistribution(address)': FunctionFragment;
    'setLpLockingRewardRatio(uint256)': FunctionFragment;
    'setMinters(address[])': FunctionFragment;
    'setOperationExpenses(address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addReward'
      | 'admin'
      | 'forwardReward'
      | 'getLPFeeDistributionAddress'
      | 'getMFDstatsAddress'
      | 'getMultiFeeDistributionAddress'
      | 'getRdntTokenAddress'
      | 'lockedBalances'
      | 'lpFeeDistribution'
      | 'lpLockingRewardRatio'
      | 'mint'
      | 'minters'
      | 'mintersAreSet'
      | 'multiFeeDistribution'
      | 'operationExpenseRatio'
      | 'operationExpenses'
      | 'owner'
      | 'rdntToken'
      | 'recoverERC20'
      | 'renounceOwnership'
      | 'setLPFeeDistribution'
      | 'setLpLockingRewardRatio'
      | 'setMinters'
      | 'setOperationExpenses'
      | 'transferOwnership'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'forwardReward', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'getLPFeeDistributionAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMFDstatsAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getMultiFeeDistributionAddress',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'getRdntTokenAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedBalances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lpFeeDistribution', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lpLockingRewardRatio', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: 'minters', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'mintersAreSet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'multiFeeDistribution', values?: undefined): string;
  encodeFunctionData(functionFragment: 'operationExpenseRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'operationExpenses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rdntToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'recoverERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setLPFeeDistribution',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setLpLockingRewardRatio',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setMinters', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(
    functionFragment: 'setOperationExpenses',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forwardReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLPFeeDistributionAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMFDstatsAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMultiFeeDistributionAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRdntTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpFeeDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpLockingRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintersAreSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multiFeeDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operationExpenseRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operationExpenses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rdntToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLPFeeDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLpLockingRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOperationExpenses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'ForwardReward(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Recovered(address,uint256)': EventFragment;
    'SetOperationExpenses(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ForwardReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Recovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetOperationExpenses'): EventFragment;
}

export interface ForwardRewardEventObject {
  token: string;
  amount: BigNumber;
}
export type ForwardRewardEvent = TypedEvent<[string, BigNumber], ForwardRewardEventObject>;

export type ForwardRewardEventFilter = TypedEventFilter<ForwardRewardEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RecoveredEventObject {
  token: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<[string, BigNumber], RecoveredEventObject>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface SetOperationExpensesEventObject {
  opEx: string;
  ratio: BigNumber;
}
export type SetOperationExpensesEvent = TypedEvent<
  [string, BigNumber],
  SetOperationExpensesEventObject
>;

export type SetOperationExpensesEventFilter = TypedEventFilter<SetOperationExpensesEvent>;

export interface MiddleFeeDistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MiddleFeeDistributionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addReward(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    forwardReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLPFeeDistributionAddress(overrides?: CallOverrides): Promise<[string]>;

    getMFDstatsAddress(overrides?: CallOverrides): Promise<[string]>;

    getMultiFeeDistributionAddress(overrides?: CallOverrides): Promise<[string]>;

    getRdntTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    lockedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, LockedBalanceStructOutput[]] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: LockedBalanceStructOutput[];
      }
    >;

    lpFeeDistribution(overrides?: CallOverrides): Promise<[string]>;

    lpLockingRewardRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withPenalty: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    mintersAreSet(overrides?: CallOverrides): Promise<[boolean]>;

    multiFeeDistribution(overrides?: CallOverrides): Promise<[string]>;

    operationExpenseRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    operationExpenses(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rdntToken(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLPFeeDistribution(
      _lpFeeDistribution: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLpLockingRewardRatio(
      _lpLockingRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperationExpenses(
      _operationExpenses: PromiseOrValue<string>,
      _operationExpenseRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addReward(
    _rewardsToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  forwardReward(
    _rewardTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLPFeeDistributionAddress(overrides?: CallOverrides): Promise<string>;

  getMFDstatsAddress(overrides?: CallOverrides): Promise<string>;

  getMultiFeeDistributionAddress(overrides?: CallOverrides): Promise<string>;

  getRdntTokenAddress(overrides?: CallOverrides): Promise<string>;

  lockedBalances(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, LockedBalanceStructOutput[]] & {
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: LockedBalanceStructOutput[];
    }
  >;

  lpFeeDistribution(overrides?: CallOverrides): Promise<string>;

  lpLockingRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    withPenalty: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  mintersAreSet(overrides?: CallOverrides): Promise<boolean>;

  multiFeeDistribution(overrides?: CallOverrides): Promise<string>;

  operationExpenseRatio(overrides?: CallOverrides): Promise<BigNumber>;

  operationExpenses(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rdntToken(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLPFeeDistribution(
    _lpFeeDistribution: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLpLockingRewardRatio(
    _lpLockingRewardRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinters(
    _minters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperationExpenses(
    _operationExpenses: PromiseOrValue<string>,
    _operationExpenseRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addReward(_rewardsToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    forwardReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getLPFeeDistributionAddress(overrides?: CallOverrides): Promise<string>;

    getMFDstatsAddress(overrides?: CallOverrides): Promise<string>;

    getMultiFeeDistributionAddress(overrides?: CallOverrides): Promise<string>;

    getRdntTokenAddress(overrides?: CallOverrides): Promise<string>;

    lockedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, LockedBalanceStructOutput[]] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: LockedBalanceStructOutput[];
      }
    >;

    lpFeeDistribution(overrides?: CallOverrides): Promise<string>;

    lpLockingRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withPenalty: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    mintersAreSet(overrides?: CallOverrides): Promise<boolean>;

    multiFeeDistribution(overrides?: CallOverrides): Promise<string>;

    operationExpenseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    operationExpenses(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rdntToken(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLPFeeDistribution(
      _lpFeeDistribution: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLpLockingRewardRatio(
      _lpLockingRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinters(_minters: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    setOperationExpenses(
      _operationExpenses: PromiseOrValue<string>,
      _operationExpenseRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ForwardReward(address,uint256)'(token?: null, amount?: null): ForwardRewardEventFilter;
    ForwardReward(token?: null, amount?: null): ForwardRewardEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Recovered(address,uint256)'(token?: null, amount?: null): RecoveredEventFilter;
    Recovered(token?: null, amount?: null): RecoveredEventFilter;

    'SetOperationExpenses(address,uint256)'(
      opEx?: null,
      ratio?: null
    ): SetOperationExpensesEventFilter;
    SetOperationExpenses(opEx?: null, ratio?: null): SetOperationExpensesEventFilter;
  };

  estimateGas: {
    addReward(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    forwardReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLPFeeDistributionAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getMFDstatsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiFeeDistributionAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRdntTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalances(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lpFeeDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    lpLockingRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withPenalty: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintersAreSet(overrides?: CallOverrides): Promise<BigNumber>;

    multiFeeDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    operationExpenseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    operationExpenses(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rdntToken(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLPFeeDistribution(
      _lpFeeDistribution: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLpLockingRewardRatio(
      _lpLockingRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperationExpenses(
      _operationExpenses: PromiseOrValue<string>,
      _operationExpenseRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forwardReward(
      _rewardTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLPFeeDistributionAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMFDstatsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiFeeDistributionAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRdntTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBalances(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpFeeDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpLockingRewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      withPenalty: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintersAreSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiFeeDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operationExpenseRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operationExpenses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rdntToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLPFeeDistribution(
      _lpFeeDistribution: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLpLockingRewardRatio(
      _lpLockingRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinters(
      _minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperationExpenses(
      _operationExpenses: PromiseOrValue<string>,
      _operationExpenseRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
