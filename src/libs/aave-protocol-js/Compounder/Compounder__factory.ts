/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../common';
import type { Compounder, CompounderInterface } from './Compounder';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint8',
        name: 'version',
        type: 'uint8',
      },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'Paused',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address[]',
        name: '_tokens',
        type: 'address[]',
      },
    ],
    name: 'RewardBaseTokensUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address[]',
        name: '_routes',
        type: 'address[]',
      },
    ],
    name: 'RoutesUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'Unpaused',
    type: 'event',
  },
  {
    inputs: [],
    name: 'PERCENT_DIVISOR',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_tokens',
        type: 'address[]',
      },
    ],
    name: 'addRewardBaseTokens',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'addressProvider',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'autocompoundThreshold',
    outputs: [
      {
        internalType: 'uint256',
        name: 'minStakeAmtEth',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'baseToken',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'bountyManager',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
      {
        internalType: 'bool',
        name: '_execute',
        type: 'bool',
      },
    ],
    name: 'claimCompound',
    outputs: [
      {
        internalType: 'uint256',
        name: 'fee',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'compoundFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_uniRouter',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_mfd',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_baseToken',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_addressProvider',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_lockZap',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_compoundFee',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_slippageLimit',
        type: 'uint256',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_pending',
        type: 'uint256',
      },
    ],
    name: 'isEligibleForAutoCompound',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_pending',
        type: 'uint256',
      },
    ],
    name: 'isEligibleForCompound',
    outputs: [
      {
        internalType: 'bool',
        name: 'eligible',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'lastAutocompound',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'lockZap',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'multiFeeDistribution',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pause',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'paused',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'priceProvider',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'rdntToken',
    outputs: [
      {
        internalType: 'contract IMintableToken',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'rewardBaseTokens',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'rewardToBaseRoute',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'selfCompound',
    outputs: [
      {
        internalType: 'uint256',
        name: 'fee',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'selfEligibleCompound',
    outputs: [
      {
        internalType: 'bool',
        name: 'eligible',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_manager',
        type: 'address',
      },
    ],
    name: 'setBountyManager',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_compoundFee',
        type: 'uint256',
      },
    ],
    name: 'setCompoundFee',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'address[]',
        name: '_routes',
        type: 'address[]',
      },
    ],
    name: 'setRoutes',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_slippageLimit',
        type: 'uint256',
      },
    ],
    name: 'setSlippageLimit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'slippageLimit',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'uniRouter',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'unpause',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
    ],
    name: 'userEligibleForCompound',
    outputs: [
      {
        internalType: 'bool',
        name: 'eligible',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
    ],
    name: 'viewPendingRewards',
    outputs: [
      {
        internalType: 'address[]',
        name: 'tokens',
        type: 'address[]',
      },
      {
        internalType: 'uint256[]',
        name: 'amts',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'wethToRadiant',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405261012c6001553480156200001757600080fd5b5060405162002b1d38038062002b1d8339810160408190526200003a9162000353565b62000045336200025c565b6001600160a01b0385166200005957600080fd5b6001600160a01b0384166200006d57600080fd5b6001600160a01b0383166200008157600080fd5b6001600160a01b0382166200009557600080fd5b6001600160a01b038116620000a957600080fd5b600880546001600160a01b038088166001600160a01b0319928316179092556009805487841690831681179091556003805487851690841617905560048054868516908416178155600a8054948616949093169390931790915560408051634c6f713160e01b815290519192634c6f7131928282019260209290829003018186803b1580156200013857600080fd5b505afa1580156200014d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017391906200032d565b600280546001600160a01b0319166001600160a01b0392831617905560095460408051634e1a67f560e01b815290519190921691634e1a67f5916004808301926020929190829003018186803b158015620001cd57600080fd5b505afa158015620001e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020891906200032d565b600580546001600160a01b0319166001600160a01b039283161790556040805180820190915260035482168152600280549092166020820152620002509160079190620002ac565b505050505050620003eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000304579160200282015b828111156200030457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002cd565b506200031292915062000316565b5090565b5b8082111562000312576000815560010162000317565b6000602082840312156200033f578081fd5b81516200034c81620003d2565b9392505050565b600080600080600060a086880312156200036b578081fd5b85516200037881620003d2565b60208701519095506200038b81620003d2565b60408701519094506200039e81620003d2565b6060870151909350620003b181620003d2565b6080870151909250620003c481620003d2565b809150509295509295909350565b6001600160a01b0381168114620003e857600080fd5b50565b61272280620003fb6000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806378940b6c116100ee578063b888879e11610097578063d3cb96fa11610071578063d3cb96fa1461035d578063e08094c814610370578063f2fde38b14610383578063ff66a3051461039657600080fd5b8063b888879e1461032e578063c55dae6314610341578063c57981b51461035457600080fd5b8063a0e47bf6116100c8578063a0e47bf6146102f5578063b19f2dbc14610308578063b36b9ffd1461031b57600080fd5b806378940b6c146102c95780638da5cb5b146102d15780638f432074146102e257600080fd5b80634451a2a21161015b578063542b3cb811610135578063542b3cb81461029357806365ee91a7146102a65780636eec47ce146102ae578063715018a6146102c157600080fd5b80634451a2a2146102545780634870dd9a146102775780634c6f71311461028057600080fd5b80632954018c1161018c5780632954018c146102245780633239d438146102375780633d7175441461023f57600080fd5b806306346c30146101b357806317053a7e146101e35780631be6fde314610211575b600080fd5b600a546101c6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102036101f1366004612050565b600c6020526000908152604090205481565b6040519081526020016101da565b6101c661021f3660046122d3565b6103a9565b6004546101c6906001600160a01b031681565b6102036103d3565b61025261024d36600461208f565b610583565b005b6102676102623660046122d3565b6105f2565b60405190151581526020016101da565b61020361271081565b6002546101c6906001600160a01b031681565b6009546101c6906001600160a01b031681565b610267610605565b6101c66102bc3660046122d3565b610647565b610252610657565b61020361066b565b6000546001600160a01b03166101c6565b6102036102f03660046120dd565b61067d565b6008546101c6906001600160a01b031681565b610252610316366004612140565b610947565b600b546101c6906001600160a01b031681565b6005546101c6906001600160a01b031681565b6003546101c6906001600160a01b031681565b61020360015481565b6101c661036b366004612115565b61099d565b61026761037e366004612115565b6109d5565b610252610391366004612050565b610ada565b6102526103a4366004612050565b610b6a565b600781815481106103b957600080fd5b6000918252602090912001546001600160a01b0316905081565b600554600b54604080517fd9cdd51300000000000000000000000000000000000000000000000000000000815290516000936001600160a01b0390811693859391169163d9cdd51391600480820192602092909190829003018186803b15801561043c57600080fd5b505afa158015610450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047491906122eb565b90506000826001600160a01b0316636f5cdb6c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b157600080fd5b505afa1580156104c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e991906122eb565b9050826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561052457600080fd5b505afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c91906122eb565b61056790600a612574565b610571828461261c565b61057b9190612511565b935050505090565b61058b610ba1565b6001600160a01b0382166000908152600d6020908152604090912082516105b492840190611f51565b507fbdcf5c7cd2942fc5ccabe6763e7068cae07e81eab2274cbf60f941357fc726c082826040516105e69291906123be565b60405180910390a15050565b60006105fc6103d3565b90911015919050565b600080600061061333610bfb565b600354919350915060009061063490849084906001600160a01b0316610f12565b905061063e6103d3565b11159392505050565b600681815481106103b957600080fd5b61065f610ba1565b6106696000610faf565b565b600061067833600161067d565b905090565b60006001600160a01b038316331415818061069786610bfb565b60035491935091506000906106b890849084906001600160a01b0316610f12565b9050831561075157600b546001600160a01b031633146106d757600080fd5b60006106e388836109d5565b90508061074b57861561073d5760405162461bcd60e51b815260206004820152601d60248201527f6e6f7420656c696769626c6520666f72206175746f636f6d706f756e6400000060448201526064015b60405180910390fd5b600095505050505050610941565b506107a6565b61075a816105f2565b6107a65760405162461bcd60e51b815260206004820152601560248201527f6d696e207374616b6520616d74206e6f74206d657400000000000000000000006044820152606401610734565b856107e45760006107b7828861100c565b90506000612710600154836107cc919061261c565b6107d69190612511565b965061094195505050505050565b60006107ef88611301565b905061251c826108018361271061261c565b61080b9190612511565b10156108595760405162461bcd60e51b815260206004820152601160248201527f746f6f206d75636820736c6970706167650000000000000000000000000000006044820152606401610734565b84156108865761088361271060015483610873919061261c565b61087d9190612511565b8861100c565b95505b61088f886117a1565b50841561093b57600254600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810189905291169063095ea7b390604401602060405180830381600087803b1580156108e657600080fd5b505af11580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e91906122b7565b506001600160a01b0388166000908152600c602052604090204290555b50505050505b92915050565b61094f610ba1565b8051610962906006906020840190611f51565b507fb55f0df293d67d65dc862e41c2fbfc662b213b761342ac229f5a24f3c70bfe338160405161099291906123e0565b60405180910390a150565b600d60205281600052604060002081815481106109b957600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b0382166000908152600c602052604081205460019015610a23576001600160a01b0384166000908152600c60205260409020546201518090610a1e904261263b565b101590505b6009546040517fada71bc20000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529091169063ada71bc29060240160206040518083038186803b158015610a8157600080fd5b505afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab991906122b7565b8015610ac95750610ac9836105f2565b8015610ad25750805b949350505050565b610ae2610ba1565b6001600160a01b038116610b5e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610734565b610b6781610faf565b50565b610b72610ba1565b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146106695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610734565b6009546040517fdc01f60d0000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260609283926000929091169063dc01f60d9060240160006040518083038186803b158015610c6157600080fd5b505afa158015610c75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c9d9190810190612173565b905060018151610cad919061263b565b67ffffffffffffffff811115610cd357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610cfc578160200160208202803683370190505b50925060018151610d0d919061263b565b67ffffffffffffffff811115610d3357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d5c578160200160208202803683370190505b5091506000805b8251811015610f0a5760025483516001600160a01b0390911690849083908110610d9d57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031614610ef857828181518110610dd757634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031663b16a19de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1b57600080fd5b505afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e539190612073565b858381518110610e7357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110610eb357634e487b7160e01b600052603260045260246000fd5b602002602001015160200151848381518110610edf57634e487b7160e01b600052603260045260246000fd5b602090810291909101015281610ef481612682565b9250505b80610f0281612682565b915050610d63565b505050915091565b60008251845114610f2257600080fd5b835160005b81811015610fa657610f88868281518110610f5257634e487b7160e01b600052603260045260246000fd5b602002602001015185878481518110610f7b57634e487b7160e01b600052603260045260246000fd5b60200260200101516118fc565b610f9290846124f9565b925080610f9e81612682565b915050610f27565b50509392505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600560009054906101000a90046001600160a01b03166001600160a01b0316634b94f50e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105d57600080fd5b505afa158015611071573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109591906122eb565b9050831561127657821561119a576008546003546110c0916001600160a01b03918216911686611bcc565b6008546000906001600160a01b03166338ed173986836007306110e5426102586124f9565b6040518663ffffffff1660e01b815260040161110595949392919061243f565b600060405180830381600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115b9190810190612230565b9050806001825161116c919061263b565b8151811061118a57634e487b7160e01b600052603260045260246000fd5b6020026020010151925050611276565b6008546040517fd06ca61f0000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063d06ca61f906111e7908890600790600401612426565b60006040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261123b9190810190612230565b9050806001825161124c919061263b565b8151811061126a57634e487b7160e01b600052603260045260246000fd5b60200260200101519250505b6000611282838361261c565b90506127106112938661251c61261c565b61129d9190612511565b6112ab6305f5e10083612511565b10156112f95760405162461bcd60e51b815260206004820152601160248201527f746f6f206d75636820736c6970706167650000000000000000000000000000006044820152606401610734565b505092915050565b6009546040517fb2d6e66d0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000921690819063b2d6e66d90602401600060405180830381600087803b15801561136457600080fd5b505af1158015611378573d6000803e3d6000fd5b505050506000600460009054906101000a90046001600160a01b03166001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cc57600080fd5b505afa1580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114049190612073565b905060005b6006548110156117255760006006828154811061143657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561148257600080fd5b505afa158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba91906122eb565b9050806114c75750611713565b6000600683815481106114ea57634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080517fb16a19de00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263b16a19de92600480840193829003018186803b15801561154c57600080fd5b505afa158015611560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115849190612073565b6040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03808316600483015260001960248301523060448301529192506000918616906369328dec90606401602060405180830381600087803b1580156115f457600080fd5b505af1158015611608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162c91906122eb565b6003549091506001600160a01b0383811691161461170f5760085461165e906001600160a01b03848116911683611bcc565b6008546001600160a01b038381166000908152600d6020526040812091909216916338ed17399184919030611695426102586124f9565b6040518663ffffffff1660e01b81526004016116b595949392919061243f565b600060405180830381600087803b1580156116cf57600080fd5b505af192505050801561170457506040513d6000823e601f3d908101601f191682016040526117019190810190612230565b60015b61170d5761170f565b505b5050505b8061171d81612682565b915050611409565b506003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561176957600080fd5b505afa15801561177d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad291906122eb565b6003546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156117e957600080fd5b505afa1580156117fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182191906122eb565b905080156118f657600a54600354611846916001600160a01b03918216911683611bcc565b600a546040517fd47808850000000000000000000000000000000000000000000000000000000081526000600482018190526024820184905260448201526001600160a01b0385811660648301529091169063d478088590608401602060405180830381600087803b1580156118bb57600080fd5b505af11580156118cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f391906122eb565b91505b50919050565b60048054604080517ffca513a8000000000000000000000000000000000000000000000000000000008152905160009384936001600160a01b03169263fca513a89281830192602092829003018186803b15801561195957600080fd5b505afa15801561196d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119919190612073565b60405163b3596f0760e01b81526001600160a01b03878116600483015291925060009183169063b3596f079060240160206040518083038186803b1580156119d857600080fd5b505afa1580156119ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1091906122eb565b60405163b3596f0760e01b81526001600160a01b03878116600483015291925060009184169063b3596f079060240160206040518083038186803b158015611a5757600080fd5b505afa158015611a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8f91906122eb565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611acc57600080fd5b505afa158015611ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b049190612303565b60ff1690506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4457600080fd5b505afa158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7c9190612303565b60ff169050611b8c82600a612574565b611b96908461261c565b611ba182600a612574565b611bab868a61261c565b611bb5919061261c565b611bbf9190612511565b9998505050505050505050565b801580611c6e57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611c3457600080fd5b505afa158015611c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6c91906122eb565b155b611ce05760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610734565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b179052611d47908490611d4c565b505050565b6000611da1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e319092919063ffffffff16565b805190915015611d475780806020019051810190611dbf91906122b7565b611d475760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610734565b6060610ad2848460008585600080866001600160a01b03168587604051611e5891906123a2565b60006040518083038185875af1925050503d8060008114611e95576040519150601f19603f3d011682016040523d82523d6000602084013e611e9a565b606091505b5091509150611eab87838387611eb6565b979650505050505050565b60608315611f22578251611f1b576001600160a01b0385163b611f1b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610734565b5081610ad2565b610ad28383815115611f375781518083602001fd5b8060405162461bcd60e51b815260040161073491906123f3565b828054828255906000526020600020908101928215611fb3579160200282015b82811115611fb3578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190611f71565b50611fbf929150611fc3565b5090565b5b80821115611fbf5760008155600101611fc4565b600082601f830112611fe8578081fd5b81356020611ffd611ff8836124d5565b6124a4565b80838252828201915082860187848660051b890101111561201c578586fd5b855b85811015612043578135612031816126c9565b8452928401929084019060010161201e565b5090979650505050505050565b600060208284031215612061578081fd5b813561206c816126c9565b9392505050565b600060208284031215612084578081fd5b815161206c816126c9565b600080604083850312156120a1578081fd5b82356120ac816126c9565b9150602083013567ffffffffffffffff8111156120c7578182fd5b6120d385828601611fd8565b9150509250929050565b600080604083850312156120ef578182fd5b82356120fa816126c9565b9150602083013561210a816126de565b809150509250929050565b60008060408385031215612127578182fd5b8235612132816126c9565b946020939093013593505050565b600060208284031215612151578081fd5b813567ffffffffffffffff811115612167578182fd5b610ad284828501611fd8565b60006020808385031215612185578182fd5b825167ffffffffffffffff81111561219b578283fd5b8301601f810185136121ab578283fd5b80516121b9611ff8826124d5565b80828252848201915084840188868560061b87010111156121d8578687fd5b8694505b8385101561222457604080828b0312156121f4578788fd5b6121fc61247b565b8251612207816126c9565b8152828801518882015284526001959095019492860192016121dc565b50979650505050505050565b60006020808385031215612242578182fd5b825167ffffffffffffffff811115612258578283fd5b8301601f81018513612268578283fd5b8051612276611ff8826124d5565b80828252848201915084840188868560051b8701011115612295578687fd5b8694505b83851015612224578051835260019490940193918501918501612299565b6000602082840312156122c8578081fd5b815161206c816126de565b6000602082840312156122e4578081fd5b5035919050565b6000602082840312156122fc578081fd5b5051919050565b600060208284031215612314578081fd5b815160ff8116811461206c578182fd5b6000815180845260208085019450808401835b8381101561235c5781516001600160a01b031687529582019590820190600101612337565b509495945050505050565b6000815480845260208085019450838352808320835b8381101561235c5781546001600160a01b03168752958201956001918201910161237d565b600082516123b4818460208701612652565b9190910192915050565b6001600160a01b0383168152604060208201526000610ad26040830184612324565b60208152600061206c6020830184612324565b6020815260008251806020840152612412816040850160208701612652565b601f01601f19169190910160400192915050565b828152604060208201526000610ad26040830184612367565b85815284602082015260a06040820152600061245e60a0830186612367565b6001600160a01b0394909416606083015250608001529392505050565b6040805190810167ffffffffffffffff8111828210171561249e5761249e6126b3565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156124cd576124cd6126b3565b604052919050565b600067ffffffffffffffff8211156124ef576124ef6126b3565b5060051b60200190565b6000821982111561250c5761250c61269d565b500190565b60008261252c57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561256c5781600019048211156125525761255261269d565b8085161561255f57918102915b93841c9390800290612536565b509250929050565b600061206c838360008261258a57506001610941565b8161259757506000610941565b81600181146125ad57600281146125b7576125d3565b6001915050610941565b60ff8411156125c8576125c861269d565b50506001821b610941565b5060208310610133831016604e8410600b84101617156125f6575081810a610941565b6126008383612531565b80600019048211156126145761261461269d565b029392505050565b60008160001904831182151516156126365761263661269d565b500290565b60008282101561264d5761264d61269d565b500390565b60005b8381101561266d578181015183820152602001612655565b8381111561267c576000848401525b50505050565b60006000198214156126965761269661269d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b6757600080fd5b8015158114610b6757600080fdfea2646970667358221220ce4d87175324bebe88ea842ce07ea546287b2881a58e99bd5dda58523b7b9b8164736f6c63430008040033';

type CompounderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompounderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Compounder__factory extends ContractFactory {
  constructor(...args: CompounderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _uniRouter: PromiseOrValue<string>,
    _mfd: PromiseOrValue<string>,
    _baseToken: PromiseOrValue<string>,
    _addressProvider: PromiseOrValue<string>,
    _lockZap: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Compounder> {
    return super.deploy(
      _uniRouter,
      _mfd,
      _baseToken,
      _addressProvider,
      _lockZap,
      overrides || {}
    ) as Promise<Compounder>;
  }
  override getDeployTransaction(
    _uniRouter: PromiseOrValue<string>,
    _mfd: PromiseOrValue<string>,
    _baseToken: PromiseOrValue<string>,
    _addressProvider: PromiseOrValue<string>,
    _lockZap: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _uniRouter,
      _mfd,
      _baseToken,
      _addressProvider,
      _lockZap,
      overrides || {}
    );
  }
  override attach(address: string): Compounder {
    return super.attach(address) as Compounder;
  }
  override connect(signer: Signer): Compounder__factory {
    return super.connect(signer) as Compounder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompounderInterface {
    return new utils.Interface(_abi) as CompounderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Compounder {
    return new Contract(address, _abi, signerOrProvider) as Compounder;
  }
}
